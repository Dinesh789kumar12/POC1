// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: availabilty.proto

package availabilitypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AvailabiltyServiceClient is the client API for AvailabiltyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AvailabiltyServiceClient interface {
	GetAvailability(ctx context.Context, in *AvailabiltyRequest, opts ...grpc.CallOption) (AvailabiltyService_GetAvailabilityClient, error)
}

type availabiltyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAvailabiltyServiceClient(cc grpc.ClientConnInterface) AvailabiltyServiceClient {
	return &availabiltyServiceClient{cc}
}

func (c *availabiltyServiceClient) GetAvailability(ctx context.Context, in *AvailabiltyRequest, opts ...grpc.CallOption) (AvailabiltyService_GetAvailabilityClient, error) {
	stream, err := c.cc.NewStream(ctx, &AvailabiltyService_ServiceDesc.Streams[0], "/availabilitypb.AvailabiltyService/GetAvailability", opts...)
	if err != nil {
		return nil, err
	}
	x := &availabiltyServiceGetAvailabilityClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AvailabiltyService_GetAvailabilityClient interface {
	Recv() (*AvailabiltyResponse, error)
	grpc.ClientStream
}

type availabiltyServiceGetAvailabilityClient struct {
	grpc.ClientStream
}

func (x *availabiltyServiceGetAvailabilityClient) Recv() (*AvailabiltyResponse, error) {
	m := new(AvailabiltyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AvailabiltyServiceServer is the server API for AvailabiltyService service.
// All implementations must embed UnimplementedAvailabiltyServiceServer
// for forward compatibility
type AvailabiltyServiceServer interface {
	GetAvailability(*AvailabiltyRequest, AvailabiltyService_GetAvailabilityServer) error
	mustEmbedUnimplementedAvailabiltyServiceServer()
}

// UnimplementedAvailabiltyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAvailabiltyServiceServer struct {
}

func (UnimplementedAvailabiltyServiceServer) GetAvailability(*AvailabiltyRequest, AvailabiltyService_GetAvailabilityServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAvailability not implemented")
}
func (UnimplementedAvailabiltyServiceServer) mustEmbedUnimplementedAvailabiltyServiceServer() {}

// UnsafeAvailabiltyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AvailabiltyServiceServer will
// result in compilation errors.
type UnsafeAvailabiltyServiceServer interface {
	mustEmbedUnimplementedAvailabiltyServiceServer()
}

func RegisterAvailabiltyServiceServer(s grpc.ServiceRegistrar, srv AvailabiltyServiceServer) {
	s.RegisterService(&AvailabiltyService_ServiceDesc, srv)
}

func _AvailabiltyService_GetAvailability_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AvailabiltyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AvailabiltyServiceServer).GetAvailability(m, &availabiltyServiceGetAvailabilityServer{stream})
}

type AvailabiltyService_GetAvailabilityServer interface {
	Send(*AvailabiltyResponse) error
	grpc.ServerStream
}

type availabiltyServiceGetAvailabilityServer struct {
	grpc.ServerStream
}

func (x *availabiltyServiceGetAvailabilityServer) Send(m *AvailabiltyResponse) error {
	return x.ServerStream.SendMsg(m)
}

// AvailabiltyService_ServiceDesc is the grpc.ServiceDesc for AvailabiltyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AvailabiltyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "availabilitypb.AvailabiltyService",
	HandlerType: (*AvailabiltyServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAvailability",
			Handler:       _AvailabiltyService_GetAvailability_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "availabilty.proto",
}
