// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: routing.proto

package routingpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoutingServiceClient is the client API for RoutingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoutingServiceClient interface {
	GetRates(ctx context.Context, opts ...grpc.CallOption) (RoutingService_GetRatesClient, error)
	Booking(ctx context.Context, opts ...grpc.CallOption) (RoutingService_BookingClient, error)
	GetAvailability(ctx context.Context, opts ...grpc.CallOption) (RoutingService_GetAvailabilityClient, error)
	Confirmation(ctx context.Context, in *ConfirmRequest, opts ...grpc.CallOption) (*ConfirmResponse, error)
}

type routingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoutingServiceClient(cc grpc.ClientConnInterface) RoutingServiceClient {
	return &routingServiceClient{cc}
}

func (c *routingServiceClient) GetRates(ctx context.Context, opts ...grpc.CallOption) (RoutingService_GetRatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &RoutingService_ServiceDesc.Streams[0], "/routingpb.RoutingService/GetRates", opts...)
	if err != nil {
		return nil, err
	}
	x := &routingServiceGetRatesClient{stream}
	return x, nil
}

type RoutingService_GetRatesClient interface {
	Send(*RoutingRequest) error
	Recv() (*RoutingResponse, error)
	grpc.ClientStream
}

type routingServiceGetRatesClient struct {
	grpc.ClientStream
}

func (x *routingServiceGetRatesClient) Send(m *RoutingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routingServiceGetRatesClient) Recv() (*RoutingResponse, error) {
	m := new(RoutingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routingServiceClient) Booking(ctx context.Context, opts ...grpc.CallOption) (RoutingService_BookingClient, error) {
	stream, err := c.cc.NewStream(ctx, &RoutingService_ServiceDesc.Streams[1], "/routingpb.RoutingService/Booking", opts...)
	if err != nil {
		return nil, err
	}
	x := &routingServiceBookingClient{stream}
	return x, nil
}

type RoutingService_BookingClient interface {
	Send(*BookingRequest) error
	Recv() (*BookingResponse, error)
	grpc.ClientStream
}

type routingServiceBookingClient struct {
	grpc.ClientStream
}

func (x *routingServiceBookingClient) Send(m *BookingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routingServiceBookingClient) Recv() (*BookingResponse, error) {
	m := new(BookingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routingServiceClient) GetAvailability(ctx context.Context, opts ...grpc.CallOption) (RoutingService_GetAvailabilityClient, error) {
	stream, err := c.cc.NewStream(ctx, &RoutingService_ServiceDesc.Streams[2], "/routingpb.RoutingService/GetAvailability", opts...)
	if err != nil {
		return nil, err
	}
	x := &routingServiceGetAvailabilityClient{stream}
	return x, nil
}

type RoutingService_GetAvailabilityClient interface {
	Send(*AvailabiltyRequest) error
	Recv() (*ListAvailabiltyResponse, error)
	grpc.ClientStream
}

type routingServiceGetAvailabilityClient struct {
	grpc.ClientStream
}

func (x *routingServiceGetAvailabilityClient) Send(m *AvailabiltyRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routingServiceGetAvailabilityClient) Recv() (*ListAvailabiltyResponse, error) {
	m := new(ListAvailabiltyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routingServiceClient) Confirmation(ctx context.Context, in *ConfirmRequest, opts ...grpc.CallOption) (*ConfirmResponse, error) {
	out := new(ConfirmResponse)
	err := c.cc.Invoke(ctx, "/routingpb.RoutingService/Confirmation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoutingServiceServer is the server API for RoutingService service.
// All implementations must embed UnimplementedRoutingServiceServer
// for forward compatibility
type RoutingServiceServer interface {
	GetRates(RoutingService_GetRatesServer) error
	Booking(RoutingService_BookingServer) error
	GetAvailability(RoutingService_GetAvailabilityServer) error
	Confirmation(context.Context, *ConfirmRequest) (*ConfirmResponse, error)
	mustEmbedUnimplementedRoutingServiceServer()
}

// UnimplementedRoutingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRoutingServiceServer struct {
}

func (UnimplementedRoutingServiceServer) GetRates(RoutingService_GetRatesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRates not implemented")
}
func (UnimplementedRoutingServiceServer) Booking(RoutingService_BookingServer) error {
	return status.Errorf(codes.Unimplemented, "method Booking not implemented")
}
func (UnimplementedRoutingServiceServer) GetAvailability(RoutingService_GetAvailabilityServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAvailability not implemented")
}
func (UnimplementedRoutingServiceServer) Confirmation(context.Context, *ConfirmRequest) (*ConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Confirmation not implemented")
}
func (UnimplementedRoutingServiceServer) mustEmbedUnimplementedRoutingServiceServer() {}

// UnsafeRoutingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoutingServiceServer will
// result in compilation errors.
type UnsafeRoutingServiceServer interface {
	mustEmbedUnimplementedRoutingServiceServer()
}

func RegisterRoutingServiceServer(s grpc.ServiceRegistrar, srv RoutingServiceServer) {
	s.RegisterService(&RoutingService_ServiceDesc, srv)
}

func _RoutingService_GetRates_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RoutingServiceServer).GetRates(&routingServiceGetRatesServer{stream})
}

type RoutingService_GetRatesServer interface {
	Send(*RoutingResponse) error
	Recv() (*RoutingRequest, error)
	grpc.ServerStream
}

type routingServiceGetRatesServer struct {
	grpc.ServerStream
}

func (x *routingServiceGetRatesServer) Send(m *RoutingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routingServiceGetRatesServer) Recv() (*RoutingRequest, error) {
	m := new(RoutingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RoutingService_Booking_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RoutingServiceServer).Booking(&routingServiceBookingServer{stream})
}

type RoutingService_BookingServer interface {
	Send(*BookingResponse) error
	Recv() (*BookingRequest, error)
	grpc.ServerStream
}

type routingServiceBookingServer struct {
	grpc.ServerStream
}

func (x *routingServiceBookingServer) Send(m *BookingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routingServiceBookingServer) Recv() (*BookingRequest, error) {
	m := new(BookingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RoutingService_GetAvailability_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RoutingServiceServer).GetAvailability(&routingServiceGetAvailabilityServer{stream})
}

type RoutingService_GetAvailabilityServer interface {
	Send(*ListAvailabiltyResponse) error
	Recv() (*AvailabiltyRequest, error)
	grpc.ServerStream
}

type routingServiceGetAvailabilityServer struct {
	grpc.ServerStream
}

func (x *routingServiceGetAvailabilityServer) Send(m *ListAvailabiltyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routingServiceGetAvailabilityServer) Recv() (*AvailabiltyRequest, error) {
	m := new(AvailabiltyRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RoutingService_Confirmation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingServiceServer).Confirmation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routingpb.RoutingService/Confirmation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingServiceServer).Confirmation(ctx, req.(*ConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoutingService_ServiceDesc is the grpc.ServiceDesc for RoutingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoutingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "routingpb.RoutingService",
	HandlerType: (*RoutingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Confirmation",
			Handler:    _RoutingService_Confirmation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRates",
			Handler:       _RoutingService_GetRates_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Booking",
			Handler:       _RoutingService_Booking_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetAvailability",
			Handler:       _RoutingService_GetAvailability_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "routing.proto",
}
